@use '~@angular/material' as mat;
@import '~src/styles/shared/typography';
@import '~src/styles/shared/variables';

$arrow-width: 135px;

:host {
  --closed-height: 216px;
  --opened-height: 462px;
  display: block;

  box-sizing: border-box;
  height: var(--closed-height);
  overflow: hidden;
  transition: height $transition-duration;
  will-change: height;
  // stylelint-disable-next-line selector-no-qualifying-type
  &.show-form {
    height: var(--opened-height);
  }
}

.relation {
  display: grid;
  grid-template-columns: 1fr #{$arrow-width + 10px} 1fr;
  align-items: center;
  height: 168px;
  gap: 7px;

  &:not(:last-child) {
    margin-bottom: 24px;
  }

  app-profile-info {
    @include mat.elevation(3, var(--pn-foreground-elevation));
    box-sizing: border-box;
    height: 168px;
    padding: 20px 20px 20px 16px;
    border-radius: 4px;
    background-color: var(--pn-background-card);
  }
}

.arrows-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 6px;
  width: 145px;
  max-height: 168px;
}

.arrow-wrapper {
  display: flex;
  align-items: center;
  flex-shrink: 0;
  height: 30px;
  cursor: pointer;

  &:first-child {
    margin-top: 3px;
  }

  &:last-child {
    margin-bottom: 3px;
  }
}

.arrow {
  --arrow-color: var(--pn-accent-lighter);
  $arrow-stroke-width: 2.5px;
  @include mat.typography-level($pn-typography, caption);
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: $arrow-width;
  height: $arrow-stroke-width;
  background-color: var(--arrow-color);
  text-align: center;
  color: var(--pn-text-color);
  transition: color $transition-duration, background-color $transition-duration;

  &--selected {
    --arrow-color: var(--pn-primary-500);
    color: var(--pn-primary-500);
  }

  // TODO: add shadow to whole arrow

  &::before,
  &::after {
    content: '';
    position: absolute;
    top: 0;
    display: block;
    width: 5px;
    height: 5px;
    padding: 3px;
    border: solid var(--arrow-color);
    border-width: 0 $arrow-stroke-width $arrow-stroke-width 0;
    transition: border-color $transition-duration;
  }

  &::after {
    right: 1px;
    transform: translateY(-42%) rotate(-45deg);
  }

  &::before {
    left: 1px;
    transform: translateY(-42%) rotate(135deg);
  }

  &--left::after,
  &--right::before {
    content: unset;
  }

  &-label {
    padding: 0 4px;
    border-radius: 4px;
    background-color: var(--pn-background-card);
  }
}

app-hidden-scroll-wrapper {
  --hidden-area-size: 35px;
  --hidden-area-background: var(--pn-light-background-card);
}

.form {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: min-content 1fr;
  column-gap: 24px;
  row-gap: 14px;

  .mat-form-field {
    width: 100%;
  }

  .mat-form-field.small-field {
    width: 240px;
  }

  textarea {
    resize: none;
  }

  .comment-block {
    display: flex;
    flex-direction: column;
  }

  .actions-wrapper {
    margin-top: auto;
    align-self: flex-end;
  }
}

.comment-form-field ::ng-deep .mat-form-field-subscript-wrapper {
  top: 100%;
}
